ui_sterile: # audio "skin" or "theme" or whatever
    - event_id: ui.button.hover
      reprocess: true #can be omitted, default: false
      match_tags: [ ENGINE ] # the element MUST match ALL these tags. Tags starting with "!" are negated.
      responses:
        - _type: audio
          samples:
            - id: hover_047.wav
              pitch: 1.3 # can be omitted, default:1
              volume: 0.7 # can be omitted, default:1
              pan: 0.3 # can be omitted, default:1
          pitch: { min: 1, max: 1} # can be omitted
          volume: { min: 1, max: 1 } # can be omitted
          strategy: random          
# sample field can also point to a zip file relative path:



# in the scene hierarchy, there are two things happening:
#  a) UI elements such as buttons or "button events" send out events such as ui.button.hover
#  b) anywhere in hierearchy, "themers" or "skinners" are declared
#     skinners are simple, they only have one string field, and that is the theme ID
#     (in the above example, "ui_sterile")
#     if a skinner matches an event by ID, then it HANDLES the event by:
#       - marking it as HANDLED
#       - executing the listed responses
#     the event is bubbled up towards other skinners, but unless reprocess is TRUE, none will do anything.


#  in addition, you can declare an aditional SkinnerStack programmatically.
#  these skinners can be set to have higher or lower priority than the UI hardcoded skinners.

# the idea is that you can set up a special theme for the UI handling of certain buttons only.
# perhaps the engine-related buttons on the engineering screen need a special modifier to how they trigger.
# 



# the skinners ALSO WORK ON NON-UI PRIMITIVES, e.g. blips such as squadron icons.


# UI_PRIMITIVE : a
# BLIP : a blip is something that is on the screen. It can consist of multiple symbols and texts
# SYMBOL
# TEXT